package com.education.algos.leetcode;

import java.util.TreeSet;

public class OpenLock {
    public static void main(String[] args) {
//        System.out.println(new OpenLock().openLock(new String[]{"0201","0101","0102","1212","2002"}, "0202"));
//        System.out.println(new OpenLock().openLock(new String[]{"8888"}, "0009"));
//        System.out.println(new OpenLock().openLock(new String[]{"8887","8889","8878","8898","8788","8988","7888","9888"}, "8888"));
        System.out.println(new OpenLock().openLock(new String[]{"1000","0100","0010","0001","9000","0900","0090","0009"}, "0202"));
//        System.out.println(new OpenLock().openLock(new String[]{"6586", "6557", "0399", "3436", "1106", "4255", "1161", "7546", "2375", "5535", "7623", "0805", "7045", "8244", "1804", "1777", "5152", "7241", "4488", "3653", "7485", "9103", "2726", "4624", "8654", "1404", "9321", "5145", "4237", "5423", "9350", "3383", "8658", "2601", "2446", "1605", "6804", "1521", "0832", "5555", "6710", "3851", "6370", "0069", "7369", "6352", "4165", "4327", "9727", "1363", "9906", "9463", "8628", "5239", "0009", "2743", "0419", "4722", "7251", "5645", "5159", "4040", "1406", "5836", "0623", "9851", "2970", "0479", "1707", "5248", "0135", "8840", "9395", "1068", "9653", "4461", "6830", "7851", "7798", "3745", "1608", "2061", "5404", "3536", "3875", "3552", "8430", "0846", "5575", "2835", "1777", "5848", "5181", "8129", "2408", "3257", "9168", "3279", "4705", "9799", "1592", "7849", "4934", "1210", "0384", "3946", "5200", "3702", "4792", "1363", "0340", "4623", "9837", "0798", "2400", "0859", "3002", "1819", "2925", "8966", "7065", "3310", "1415", "9986", "7612", "1233", "9681", "6869", "5324", "4271", "1632", "2947", "8829", "9102", "9502", "4896", "2556", "4998", "7642", "8477", "4439", "8391", "7171", "2081", "5401", "0369", "4498", "1269", "2535", "7805", "6611", "1605", "1432", "6237", "5565", "9618", "2123", "5178", "3649", "8657", "6236", "6737", "1561", "1802", "1349", "9738", "6245", "7202", "8442", "7183", "5105", "7963", "0259", "5622", "3098", "0664", "7366", "1556", "5711", "9981", "4607", "2063", "7540", "1818", "7320", "8505", "1028", "6127", "1816", "8961", "7126", "4739", "4050", "7729", "5887", "4836", "1244", "2697", "3937", "9817", "2759", "9536", "0154", "7214", "5688", "1284", "5434", "7103", "2704", "6790", "3244", "8797", "3860", "1988", "1458", "4268", "1901", "4787", "7599", "6672", "3579", "3726", "6670", "1603", "3332", "7249", "0984", "6783", "4456", "0023", "2678", "0167", "8626", "6080", "5716", "5083", "6135", "8700", "7890", "8683", "2089", "0264", "2123", "0787", "3056", "2647", "4645", "8748", "6936", "6899", "0031", "4934", "0221", "9481", "9959", "1386", "7695", "2034", "0466", "0809", "9166", "6381", "6937", "0744", "8059", "8498", "5772", "8379", "4448", "5794", "7423", "2568", "4671", "6408", "4335", "1655", "3662", "1250", "5262", "7197", "6831", "8004", "0575", "8784", "2920", "0869", "7157", "0153", "7255", "1541", "1247", "5498", "0566", "6632", "7640", "1733", "2546", "5110", "2852", "8042", "8175", "0284", "8589", "8918", "5755", "2289", "0812", "4850", "4650", "9018", "6649", "5099", "6532", "9891", "8675", "1718", "5442", "6786", "8915", "3710", "3833", "2659", "7040", "3959", "2505", "7574", "1199", "3465", "4557", "7230", "9161", "5177", "7815", "4564", "1470", "8051", "6287", "2504", "4025", "8911", "6158", "6857", "8948", "7991", "3670", "3413", "0423", "7184", "7921", "1351", "8908", "1921", "1685", "5579", "4641", "0286", "6410", "2800", "7018", "1402", "7410", "3471", "1312", "9530", "4581", "5364", "4820", "8192", "3088", "4714", "2255", "2342", "5042", "8673", "9788", "2203", "0879", "2345", "9712", "2008", "0652", "0939", "0720", "2954", "4482", "2390", "0807", "4634", "6266", "5222", "6898", "7491", "0294", "1811", "0667", "8282", "5754", "1841", "9518", "9093", "7904", "4902", "0068", "5157", "7823", "8073", "8801", "8179", "1402", "9977", "2332", "9448", "2251", "8455", "6157", "1878", "4183", "3331", "8047", "1254", "9639", "2156", "5780", "7359", "0260", "9683", "6842", "1098", "6495", "2057", "6583", "0932", "2577", "1818", "6042", "8358", "1833", "5512", "4529", "0583", "9955", "9205", "6055", "3322", "2232", "5372", "5835", "2202", "9696", "1596", "3424", "3696", "5695", "1365", "6432", "0327", "1565", "8509", "6936", "3363", "3007", "3107", "0410", "6258", "2492", "0300", "1255", "1664", "8666", "6826", "9961", "5782", "0140", "5567", "9596", "1680", "1892", "5016", "8804", "4962", "9318", "4540", "5044", "0979", "2004", "4265", "7689", "0289", "3434", "6090", "1375", "3135", "3935", "5140", "9255", "3997", "3482", "8150", "8164", "0787"}, "8828"));
//        System.out.println(new OpenLock().openLock(new String[]{"4515", "4184", "9093", "6799", "6594", "8484", "8048", "2886", "5609", "9801", "7845", "2631", "3962", "5601", "5049", "3916", "7222", "5699", "3980", "0814", "2386", "8880", "4524", "5329", "6242", "9184", "5357", "1288", "5446", "9771", "5492", "0361", "8679", "2808", "1184", "0228", "6448", "9083", "5730", "3379", "9890", "5713", "2642", "0772", "0141", "8765", "4448", "7356", "5382", "8138", "0272", "0802", "7944", "6245", "1345", "6805", "6945", "3377", "6741", "0945", "0925", "1471", "1118", "3708", "8332", "6887", "9130", "0851", "5177", "6032", "1906", "0767", "5974", "3592", "4967", "2620", "7959", "3805", "4836", "8641", "9805", "6141", "1023", "5291", "6808", "8466", "6259", "4084", "8880", "0043", "7394", "6369", "0313", "3293", "5254", "3827", "1728", "5495", "5927", "3680", "5454", "1305", "3366", "8174", "2717", "1069", "3785", "9181", "6171", "1462", "8859", "4333", "5795", "8883", "9881", "1287", "6416", "5760", "4390", "6260", "9788", "6191", "1510", "2553", "0222", "7214", "5214", "2943", "9615", "4492", "5632", "7093", "5869", "4177", "3542", "2433", "3518", "0105", "5266", "8033", "3094", "5221", "2240", "5874", "3742", "8687", "5202", "7932", "4512", "4106", "0234", "3863", "8154", "3076", "7452", "9081", "1189", "9847", "6463", "5475", "2125", "8509", "8193", "7885", "0611", "5479", "4371", "4168", "8870", "1871", "0248", "9145", "7032", "4093", "1429", "5415", "5261", "4482", "7241", "7373", "6043", "3156", "1828", "0741", "4792", "7642", "8921", "3979", "8445", "2710", "5027", "0658", "6168", "2434", "4568", "6790", "5356", "5643", "8948", "2831", "2411", "0043", "4042", "2651", "6041", "8557", "8253", "2634", "0559", "9254", "9501", "3215", "0234", "3108", "3363", "8688", "1513", "7747", "3846", "3542", "6671", "9677", "4598", "7304", "8313", "1036", "5811", "3279", "7115", "3157", "7761", "3256", "3379", "4807", "2475", "8576", "3612", "6157", "1266", "8635", "9429", "9897", "8048", "2654", "3145", "5204", "8731", "9154", "6673", "7213", "0608", "1045", "6692", "0452", "3947", "6488", "0525", "5531", "0312", "7363", "5876", "2713", "0484", "2299", "3052", "4392", "0464", "2755", "7416", "5527", "1276", "2077", "3723", "0142", "0653", "9606", "0916", "6882", "6575", "2024", "6250", "1711", "3381", "7703", "1626", "6859", "1526", "0514", "6271", "3438", "2880", "9874", "5837", "6547", "4960", "0712", "9390", "6207", "1437", "1131", "2253", "9308", "0665", "6334", "6648", "4997", "1583", "4590", "1032", "4791", "8445", "2328", "8440", "1369", "2595", "8853", "0797", "1989", "3119", "5246", "5964", "7501", "2464", "7716", "2772", "8257", "6181", "7195", "5138", "2185", "8121", "1753", "5144", "1776", "3221", "3883", "5573", "7268", "7162", "5602", "3035", "5843", "1417", "1823", "9366", "6477", "0108", "5719", "8666", "8901", "7289", "2498", "2219", "4520", "2951", "7929", "5504", "0797", "7586", "5306", "2656", "7479", "6606", "4227", "7727", "4449", "2299", "0142", "5099", "3898", "7005", "4275", "3692", "1905", "5540", "8365", "8971", "9541", "7449", "6146", "2844", "1026", "7639", "2614", "0796", "5920", "4633", "9839", "9761", "5748", "5524", "1332", "5586", "3026", "9057", "1498", "8197", "0692", "7714", "6334", "7656", "1649", "2989", "4393", "6227", "5183", "6328", "9864", "5972", "2203", "7032", "3643", "2429", "0981", "4729", "0501", "9624", "1464", "2619", "7712", "6739", "9171", "0899", "9731", "1058", "7006", "1859", "4002", "5325", "1039", "0466", "2060", "4203", "8816", "8867", "1797", "9832", "6489", "4771", "9789", "0271", "7684", "6345", "0825", "9022", "4285", "8081", "9435", "0946", "4466", "6551", "4722", "3580", "5484", "5191", "4582", "0220", "1580", "0045", "8701", "3895", "1795", "0614", "3118", "4836", "2101", "2072", "7090", "9275", "8715", "1303", "4864", "1116", "6102", "2818", "9196", "1222", "3481", "1709", "6145", "2349", "3395", "5314", "3404", "4626", "3770", "7762", "8413", "7310", "9659", "0892", "9920", "7195", "7049", "7443", "5505", "3400", "2275", "0669", "6024"}, "4894"));
    }

    public int openLock(String[] deadends, String target) {
        boolean[] visited = new boolean[10_001];
        for (String s : deadends) {
            visited[Integer.parseInt(s)] = true;
        }
        if (visited[0]) return -1;
        int start = Integer.parseInt(target), ans = 0;
        TreeSet<Integer> set = new TreeSet<>((o1, o2) -> {
            int d1 = distToZero(o1), d2 = distToZero(o2);
            return d1 == d2 ? o1 - o2 : d1 - d2;
        });
        set.add(start);
        while (!set.isEmpty()) {
            int next = set.first();
            set.remove(next);
            if (next == 0) {
                return ans;
            } else {
                visited[next] = true;
                ans++;
            }
            int[] moves = getMoves(next);
            for (int m : moves) {
                if (!visited[m]) set.add(m);
            }
        }
        return -1;
    }

    private int[] getMoves(int state) {
        int[] thousands = nextStates(state / 1000);
        int hundred = state % 1000 / 100;
        int[] hundreds = nextStates(hundred);
        int ten = state % 100 / 10;
        int[] tens = nextStates(ten);
        int unit = state % 10;
        int[] units = nextStates(unit);
        return new int[]{state % 1000 + thousands[0] * 1000, state % 1000 + thousands[1] * 1000,
                state - 100 * (hundred - hundreds[0]), state - 100 * (hundred - hundreds[1]),
                state - 10 * (ten - tens[0]), state - 10 * (ten - tens[1]),
                state - unit + units[0], state - unit + units[1]};
    }

    private int[] nextStates(int digit) {
        int d1 = digit == 0 ? 9 : digit - 1, d2 = digit == 9 ? 0 : digit + 1;
        return d1 == 0 ? new int[]{d1, d2} : new int[]{d2, d1};
    }

    private int distToZero(int state) {
        return getDist(state / 1000) + getDist(state % 100 / 10) + getDist(state % 1000 / 100) + getDist(state % 10);
    }

    private int getDist(int d) {
        return d > 5 ? 10 - d : d;
    }
}
